<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd">



<!-- 自动扫描 所有包 也可以指定哪些包不能扫描。将标注Spring注解的类自动转化为bean，同时完成Bean的注入-->
    <context:component-scan base-package="edu.niit.danzhao.querySystem"/>
    <context:component-scan base-package="edu.niit.danzhao.querySystem.dao"/>
    <context:component-scan base-package="edu.niit.danzhao.querySystem.service"/>
<!--启动上下文的注解配置-->
    <context:annotation-config/>
<!--启动AOP的配置-->
    <aop:aspectj-autoproxy/>
    <!--读取外部属性文件-->
    <!--<context:property-placeholder location="jdbc.properties"/>-->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:jdbc.properties</value>
            </list>
        </property>
    </bean>

    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!--初始化大小-->
        <!--<property name="initialSize" value="${jdbc.initialSize}"/>-->
        <!--连接池最大使用连接数量-->
        <property name="maxActive" value="${jdbc.maxActive}"/>
        <!--连接池最小空闲-->
        <property name="minIdle" value="${jdbc.minIdle}"/>
        <!--配置获取连接等待超时的时间-->
        <property name="maxWait" value="${jdbc.maxWait}"/>
        <!--配置间隔多久猜进行依此检测，检测需要关闭的空闲连接，单位时毫秒-->
        <property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}"/>
        <!--配置一个连接在池中最小生存的时间，单位是毫秒-->
        <property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}"/>
       <!--连接空闲时是否测试有效-->
        <!--<property name="testWhileIdle" value="${jdbc.testWhileIdle}"/>-->
        <!--归还连接时是否测试有效-->
        <property name="testOnReturn" value="${jdbc.testOnReturn}"/>
        <!--获取连接时是否测试有效-->
        <property name="testOnBorrow" value="${jdbc.testOnBorrow}"/>
        <!--打开PSCache并且指定每个 连接商PSCache的大小-->
        <property name="poolPreparedStatements" value="${jdbc.poolPreparedStatements}"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="${jdbc.maxPoolPreparedStatementPerConnectionSize}"/>
    </bean>

<!--配置session工厂-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="mapperLocations" value="classpath*:/edu/niit/danzhao/querySystem/mapper/*.xml"/>
        <property name="dataSource" ref="dataSource"/>
        <property name="typeAliasesPackage" value="edu.niit.danzhao.querySystem.model"/>
    </bean>
    <!--使用开源中国mapper3 通用接口的配置-->
<!--扫描Mapper接口与文件-->
    <bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="edu.niit.danzhao.querySystem.dao"/>
        <property name="markerInterface" value="edu.niit.danzhao.querySystem.dao.BaseDAO"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="properties">
            <value>
                mappers = edu.niit.danzhao.querySystem.dao.BaseDAO
                IDENTITY = MYSQL
            </value>
        </property>
    </bean>
<!--事务管理器配置-->
    <bean id="manager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
          p:dataSource-ref="dataSource"/>
    <!--将事务管理器配置的实例注入进来-->
<!--使用声明式事务 与头部启用注解响应 在使用事务的类需要加上@Transactional注解-->
    <tx:annotation-driven transaction-manager="manager"/>
</beans>